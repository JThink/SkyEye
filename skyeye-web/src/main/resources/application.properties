# server
server.address=${serverAddress}
server.port=${serverPort}

# HTTP encoding
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true

# JACKSON (JacksonProperties)
spring.jackson.deserialization.FAIL_ON_UNKNOWN_PROPERTIES=false
spring.jackson.serialization-inclusion=NON_NULL
spring.jackson.time-zone=Asia/Shanghai

# Enable the default error page displayed
server.error.whitelabel.enabled=true

# jpa config
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://${database.address}/${database.name}?characterEncoding=utf8
spring.datasource.name=${database.name}
spring.datasource.username=${database.username}
spring.datasource.password=${database.password}

spring.datasource.initial-size=5
spring.datasource.min-idle=5
spring.datasource.max-idle=10
spring.datasource.max-active=100
spring.datasource.max-wait=10000
spring.datasource.validation-query=SELECT 1

spring.datasource.time-between-eviction-runs-millis=18800
spring.datasource.min-evictable-idle-time-millis=18800
spring.datasource.test-while-idle=true
spring.datasource.test-on-borrow=false
spring.datasource.test-on-return=false

spring.data.jpa.repositories.enabled=true
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.generate-ddl=false
spring.jpa.database=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql=false

# es
spring.data.es.url=${es.sql.url}
spring.data.es.sql=${es.sql.sql}
spring.data.es.delay=${es.query.delay}

# rabbitmq
spring.rabbitmq.addresses=${rabbit.request.addresses}
spring.rabbitmq.username=${rabbit.request.username}
spring.rabbitmq.password=${rabbit.request.password}
spring.rabbitmq.virtual-host=${rabbit.request.vhost}
spring.rabbitmq.dynamic=true
spring.rabbitmq.cache.channel.size=${rabbit.request.channelCacheSize}
spring.queue.rabbitmq.queue=${rabbit.request.queue}
spring.queue.rabbitmq.exchange=${rabbit.request.exchange}
spring.queue.rabbitmq.routingKey=${rabbit.request.routingKey}

# es statistic
spring.statistic.es.url=${es.sql.url}
spring.statistic.es.realtimeTemplate=select * from ${es.sql.index.event} where eventType='EVENTTYPE' and uniqueName='UNIQUENAME' and time='TIME' group by status
spring.statistic.es.realtimeAllTemplate=select * from ${es.sql.index.event} where eventType='EVENTTYPE' and time='TIME' group by status
spring.statistic.es.offlineTemplate=select * from ${es.sql.index.event} where eventType='EVENTTYPE' and uniqueName='UNIQUENAME' and day>='BEGIN' and day<='END' group by day, status
spring.statistic.es.offlineAllTemplate=select * from ${es.sql.index.event} where eventType='EVENTTYPE' and day>='BEGIN' and day<='END' group by SCOPE, status
spring.statistic.es.searchTemplate=select * from ${es.sql.index.event} where eventType='EVENTTYPE' and uniqueName='UNIQUENAME' and DATEFIELD>='BEGIN' and DATEFIELD<='END' group by SCOPE, status
spring.statistic.es.searchAllTemplate=select * from ${es.sql.index.event} where eventType='EVENTTYPE' and DATEFIELD>='BEGIN' and DATEFIELD<='END' group by SCOPE, status

# monitor
spring.monitor.es.mail=${monitor.es.mail}
spring.monitor.es.window=${monitor.es.window}
spring.monitor.es.url=${es.sql.url}
spring.monitor.es.interval=${monitor.es.interval}
spring.monitor.es.middlewareResponseTime=${monitor.es.middlewareResponseTime}
spring.monitor.es.middlewareThreshold=${monitor.es.middlewareThreshold}
spring.monitor.es.apiResponseTime=${monitor.es.apiResponseTime}
spring.monitor.es.apiThreshold=${monitor.es.apiThreshold}
spring.monitor.es.thirdResponseTime=${monitor.es.thirdResponseTime}
spring.monitor.es.thirdThreshold=${monitor.es.thirdThreshold}
spring.monitor.es.totalTemplate=select * from event-log/log where eventType='EVENTTYPE' and time>='BEGIN' and day<='END' group by SCOPE
spring.monitor.es.template=select * from event-log/log where eventType='EVENTTYPE' and time>='BEGIN' and day<='END' and cost>=COST group by SCOPE
spring.monitor.es.delay=${spring.data.es.delay}

# hbase
spring.data.hbase.quorum=${hbase.quorum}
